#!/bin/bash

#watch fuser fdisk dd fsck

# ======================================== Rules =========================================
# Use as ${tmp_}/0 as final output file
# Use "${}" "$""" "$num"
# Use single ticks with sed and awk (don't why it understands it)
# Use "${ Var }" 	when EXPANSION NEEDED			in SHELL
# Use "$Var"		when EXPANSION NOT NEEDED
# Use '$""'		when SUBSTITUTING STDIN			in AWK and SED
# Use single ticks when 
#			NO RUN TIME SUBSTITUTION EXIST in Quotes
#			Quotes DO NOT have other single ticks
# Use double ticks when 
#			RUN TIME SUBSTITUTION EXIST in Quotes
#			Quotes HAVE ANY single ticks
# Inside Double ticks		
#			LEAVE ACTIVE RUNTIME SUBSTITUTION 	${ charVar_ }
#			ESCAPE UNWANTED SUBSTITUTION		\${ charVar }, some ${ integerVar }	
#			ESCAPE unwanted Quote terminations	"\"\""
# ${ intVar } are
#			inherited from USER INPUT
#			inherited by sed and awk like ${0}
# ${ charVar_ } are 
#			ACTIVE runtime substitution variables
# ${ charVar } are 
#			inherited substitution from USER INPUT or ANOTHER FUNCTION or LOOP
#			PASSIVE substitution variables
# Before > or >>
#			check if configuration exists
#	-CAUTION- -OR-	check the number of lines in that file and DELETE ALL LINES after last line


# ==============================RUNTIME SUBSTITUTIONS=======================
# function to list runtime substitutions here

tmp_=/tmp/files
si_="sed -i"
se_="sed -e"
gq_="grep -q"
gs_="gsettings set"
og_="org.gnome"


echo
(${gq_} earth 0< /etc/hostname) || (
	echo earth 1> /etc/hostname && 
	${si_} '2s/.*/127.0.1.1    earth/' /etc/hosts 
	)
	
(${gq_} groot 0< /etc/passwd) 	|| (
	echo 'promt for root' && 
	passwd root
	)
	
(${gq_} groot 0< /etc/passwd) 	|| (
	useradd --create-home groot && 
	${si_} '/groot/s/$/\/bin\/bash/' /etc/passwd && 
	echo 'promt for groot' && 
	passwd groot
	)
# ================================= SUDOERS ========================================

(${gq_} groot 0< /etc/sudoers) 	||
	echo "groot	ALL=(ALL:ALL) ALL" 		>> /etc/sudoers


# =============================== DIRECTORIES =======================================

#mkdir /git/mine		2>/dev/null ; echo -n $?

ls /tmp/files		1> /dev/null 2>&1 || 	mkdir /tmp/files 	
ls /root/tmp		1> /dev/null 2>&1 || 	mkdir /root/tmp 	

ls /root/git/dotfile	1> /dev/null 2>&1 || 
	git clone https://github.com/GypsyCosmonaut/dotfile.git 	/root/git

ls /root/git/web	1> /dev/null 2>&1 || 
	git clone https://github.com/GypsyCosmonaut/web.git 		/root/git

# ================================ CONFIGURATIONS =======================================
# function to list all gsettings here

git config --global user.name GypsyCosmonaut
git config --global user.email rahulbansal1913@gmail.com
git config --global branch.autosetuprebase always
git config --global color.ui true
git config --global color.status auto
git config --global color.branch auto
git config --global core.editor gedit
#git config --global merge.tool vimdiff


${si_} 's/.*AutomaticLoginEnable .*/AutomaticLoginEnable = true/' 	/etc/gdm3/daemon.conf
${si_} 's/.*AutomaticLogin .*/AutomaticLogin = root/' 			/etc/gdm3/daemon.conf
${si_} 's/LEFT/RIGHT/' 						/etc/dconf/db/local.d/kali-tweaks
${si_} 's/size=32/size=20/' 					/etc/dconf/db/local.d/kali-tweaks
${si_} -i 's/shrink=true/shrink=false/' 			/etc/dconf/db/local.d/kali-tweaks
${si_} -i 's/opacity=0/opacity=100/' 				/etc/dconf/db/local.d/kali-tweaks
${si_} -i 's/.*opacity.*/background-opacity=0/'			/etc/dconf/db/local.d/kali-tweaks


gconvert() {
	g_path_=$(echo ${g_schema_} | sed 'y|.|/|; s|$|/|; s|^|/|; s|\(.*\)|\L\1|')
	schema_path_=${g_schema_}:${g_path_}
}

g_schema_=${og_}.Terminal.Legacy.Keybindings
gconvert ;

${gs_} ${schema_path_} new-window '<Control>n'
${gs_} ${schema_path_} new-tab '<Control>t'
${gs_} ${schema_path_} close-tab '<Ctrl>w'
${gs_} ${schema_path_} next-tab '<Primary>Right'
${gs_} ${schema_path_} prev-tab '<Primary>Left'
${gs_} ${schema_path_} full-screen '<Ctrl>f'

${gs_} ${og_}.Terminal.Legacy.Settings theme-variant 'dark'
${gs_} ${og_}.desktop.lockdown disable-lock-screen true
${gs_} ${og_}.shell.extensions.workspaces-to-dock dock-position "'TOP'"
${gs_} ${og_}.shell.extensions.workspaces-to-dock opaque-background false
${gs_} ${og_}.shell.extensions.workspaces-to-dock require-click-to-show false
${gs_} ${og_}.shell.extensions.workspaces-to-dock thumbnail-size 0.10
${gs_} ${og_}.shell.extensions.workspaces-to-dock thumbnail-visible-width 10.0
${gs_} ${og_}.shell.extensions.workspaces-to-dock workspace-caption-height 15.0
${gs_} ${og_}.shell.extensions.workspaces-to-dock workspace-caption-taskbar-icon-size 15.0
${gs_} ${og_}.shell.extensions.workspaces-to-dock workspace-caption-windowcount-image true
${gs_} ${og_}.shell.extensions.workspaces-to-dock animation-time 0.0
${gs_} ${og_}.shell.extensions.workspaces-to-dock show-delay 0.0
${gs_} ${og_}.shell.extensions.workspaces-to-dock hide-delay 0.0
${gs_} ${og_}.shell.app-switcher current-workspace-only true
${gs_} ${og_}.desktop.wm.keybindings switch-to-workspace-left "['<Control><Shift>Left']"
${gs_} ${og_}.desktop.wm.keybindings switch-to-workspace-right "['<Control><Shift>Right']"
${gs_} ${og_}.desktop.wm.keybindings switch-windows "['<Alt>Tab']"
${gs_} ${og_}.desktop.wm.keybindings switch-windows-backward "['<Shift><Alt>Tab']"
${gs_} ${og_}.desktop.wm.keybindings switch-applications "['<Super>Tab']"
${gs_} ${og_}.desktop.wm.keybindings switch-applications-backward "['<Super><Shift>Tab']"
${gs_} ${og_}.Terminal.Legacy.Settings default-show-menubar false
${gs_} ${og_}.desktop.datetime automatic-timezone true
${gs_} ${og_}.desktop.interface clock-show-date true
${gs_} ${og_}.desktop.interface clock-show-seconds true
${gs_} ${og_}.desktop.interface show-battery-percentage true
${gs_} ${og_}.gedit.preferences.editor display-line-numbers true
${gs_} ${og_}.gedit.preferences.editor auto-indent true
${gs_} ${og_}.gedit.preferences.editor display-overview-map true
${gs_} ${og_}.gedit.preferences.editor highlight-current-line true
${gs_} ${og_}.gedit.preferences.editor auto-save true
${gs_} ${og_}.gedit.preferences.editor bracket-matching true
${gs_} ${og_}.gedit.preferences.editor scheme 'cobalt'
${gs_} ${og_}.desktop.wm.preferences audible-bell false
${gs_} ${og_}.desktop.wm.preferences visual-bell true


# ==================================ALIASES=================================
# function to list all aliases here

${si_} '100i \\n'					/root/.bashrc
${si_} '101,$d' 					/root/.bashrc

${si_} 's/#alias grep=/alias grep=/' 			/root/.bashrc
${si_} 's/alias ls=/#alias ls=/'			/root/.bashrc
${si_} 's/HISTSIZE=/#HISTSIZE=/'			/root/.bash_history
${si_} 's/HISTFILESIZE=/#HISTFILESIZE=/'		/root/.bash_history

{

	(${gq_} 'HISTFILE=' 	0< /root/.bash_history)	|| echo 'export HISTSIZE='
	(${gq_} 'HISTFILESIZE=' 0< /root/.bash_history)	|| echo 'export HISTFILESIZE='
	
} >> /root/.bash_history

(${gq_} 'set colored-stats on' 0< /etc/inputrc) || echo 'set colored-stats on'	>> /etc/inputrc


# ==================================FUNCTIONS================================
# function to list all functions here

#${gq_} "^replace().*" 	${rc_} || echo 'replace() {} '


{
	#${gq_} ".* lsa=.*" 	/root/.bashrc || echo 'alias lsa =""'
	
	echo 'alias ls="l"'
	echo 'alias crontab="crontab -l"'
	echo 'alias pgrep="pgrep -f"'
	echo 'alias l="ls -CF --color=auto"'
	echo 'alias lv="ls -FlAshZid --color=auto"'
	echo 'alias la="ls -FlAshZi --color=auto"'
	echo 'alias c="tput reset"'
	echo 'alias e="exit"'
	echo 'alias allout="kill -9 -1"'
	echo 'alias ct="cat -A"'
	echo 'alias iip="ip addr | grep 255"'
	echo 'alias eip="curl -s http://whatismyip.akamai.com/"'
	echo 'alias tailf="tail -f"'
	echo 'alias update="apt-get update && apt-get upgrade ;"'
	#echo "alias upgrade=\"apt-get update && apt-get upgrade && apt-get dist-upgrade ; printf '\e[?5h' ; read -p '' ; printf '\e[?5l' ;\""
	echo "alias upgrade=\"apt-get update && apt-get upgrade && apt-get dist-upgrade ; 			xwd -root >/tmp/files/a.xwd ; convert -negate /tmp/files/a.xwd /tmp/files/b.xwd ; 			timeout 1 xwud -in /tmp/files/b.xwd ;\""
	echo 'alias install="apt-get install"'
	echo 'alias remove="apt-get remove"'
	echo 'alias show="apt-cache show"'
	echo 'alias policy="apt-cache policy"'
	echo 'alias search="apt-cache search"'
	echo 'alias rmdir="rm -r"'
	echo 'alias reload=". /root/git/dotfile/main"'


	echo '
	lh() {
		if [ -z "${1}" ] ;
			then
				ls -FlAshZid --color=auto .*
			else
				ls -FlAshZid --color=auto ${1}/.*
		fi
	}'


	echo '
	replace() { 
		sed -i "s:${1}:${2}:g" ^${3}$ ; 
	}'

	echo '
	mani() { 
		man -k "^${1}$" ; 
	}'

	echo '
	weather() { 
		curl wttr.in/"^${1}$" | 
		head -n -13 ; 
	}'

	echo '
	network() { 
		iip ;
		eip ; 
		#MAC
		#apr scan, tcp scan 
		ping -c 2 google.com ; 
	}'

	echo '
	system() {
		tty ;
		echo ${0} ; echo ;
		w ; echo ;
		who -a ; echo ;
		uptime ; echo ;
		uname -a ; echo ;
		ls -lshZid /; echo ;
		la /dev/sd[a..b] ;
		la /dev/sd[a-b][0-9] ; echo ;
		fdisk -l ; echo ;
		#du -h / ;
		df -ahT ; echo ;
		printenv ; echo ;
		
	}'

	echo "
	lsd() {
		ls -AlF | 
		sort -k 9,9 > ${tmp_}/1 ; 
	
		(
			file -Nz ${1} .${1} | 
			sort -k 1,1 | 
			${se_} '/^.:.*directory$/d' -e '/^..:.*directory$/d' | 
			awk '{ \$\"1\"=\"\"; print substr(\$\"0\",2) }' | 
			tac ; 
			echo ;
		) | 
		tac > ${tmp_}/2 ; 
		
		(
			echo; file -Nzi * .* | 
			sort -k 1,1 | 
			${se_} '1d' -e '2d' ;
		) > ${tmp_}/3 ; 
	
		paste ${tmp_}/1 ${tmp_}/2 ${tmp_}/3 > ${tmp_}/0 ;
		cat ${tmp_}/0 ;
	}"	
	
	echo "
	slist() { 
		apt-cache search \"\${1}\" | 
		while read -r pkg desc; 
		do 
			apt-cache policy \"\${pkg}\" | 
			awk -v pkg=\"\${pkg}\" -v desc=\"\${desc}\" 'NR==2 {print pkg, desc, \$\"0\"'; 
		done ; 
	}"

	echo '
	what(){
		whatis "${1}" ;
		echo -e "\n \n" ;
		update-alternatives --display "${1}" 2>/dev/null ;
	}'

	echo '
	cronjob() {
		printf "%148.145s\n " "********  Format  ********";
		printf "%148.100s\n " " delete <USER> <COMMAND>" ; 
		read -p "";
		case "${1}" in
			
			"delete") 
				sed -i \"/${3}/d\" /var/spool/cron/crontabs/${2}
				echo
				cat /var/spool/cron/crontabs/${2}
			;;
				
		esac
	}'	

	echo '
	glist() { 
		gsettings list-recursively | grep -i ${1} ; 
	}'	

	echo '
	grange() { 
		echo "*** schema = ${1} ***" ;
		echo "Type :: Key :: Value" ;
		echo "--------------------" ;
		for key in $(
			gsettings list-keys ${1} | 
			sort ;
		)
		do
			type="$(
					gsettings range ${1} ${key} | 
					tr "\n" " " ;
				)" ;
			value="$(
					gsettings get ${1} ${key} | 
					tr "\n" " " ;
				)" ;
			echo "${type} :: ${key} :: ${value}" ;
		done	
	}'

} >> /root/.bashrc

. /root/.bashrc


# ================================= CRON JOBS ======================================
# function to list all cron jobs here

#Persistent Enviroment Variables can be used in crontab

${si_} '16,$d'				/etc/crontab

{
	echo "* *	* * *	root	rm ${tmp_}/*"
	echo "30 *	* * *	root	updatedb"

} >> /etc/crontab

#{
#echo "7		5	/root/files/mega	/root/files/anacron"

#} >> /etc/anacrontab

echo 'Want Upgrade ??'
read r1 ;
if echo "${r1}" | 
	grep -iq "^y" ;
	
	then
		apt-get update && apt-get upgrade ;
		echo 'Want Distro Upgrade ??'
		read r101
		if echo "${r101}" | 
			grep -iq "^y" ;
			
			then 
				apt-get dist-upgrade ;
		fi
fi

echo 'Want Installation ??'
read r1 ;
if echo "${r1}" | 
	grep -iq "^y" ;
	
	then
		apt-get install \
		tree ccrypt speedtest-cli xdotool wmctrl lshw\ 
		metagoofil \
		vega \
		i3 \
		squid3 \
		websploit \
		routersploit \
		mitmf \
		snort \
		privoxy \
		owasp-mantra-ff \
		mutt \
		iperf \
		kali-linux-web kali-linux-forensic kali-linux-full kali-linux-pwtools \
		libimage-exiftool-perl \
		empathy \
		tor gnupg2 \
		texlive-full \
		strace \
		f2fs torchat fsck syncthing ssh pterm;
	
fi

echo "'reload' is set" ;
echo ;
echo -n "Want Restart ?? " ;
read r1 ;
if echo "${r1}" | 
	grep -iq "^y" ;
	
	then
		init 6 ;
	else
		wid_=$(xprop -root | 
			grep "_NET_ACTIVE_WINDOW(WINDOW)"| 
			awk '{print $5}' ;
			)
		xdotool windowfocus $wid_ ;
		xdotool key ctrl+t ;
		wmctrl -i -a $wid_ && 
		exit ;
fi
#curl -i -X GET http://rest-api.io/items
#curl -i -X GET http://rest-api.io/items/5069b47aa892630aae059584
#curl -i -X DELETE http://rest-api.io/items/5069b47aa892630aae059584
#curl -i -X POST -H 'Content-Type: application/json' -d '{"name": "New item", "year": "2009"}' http://#rest-api.io/items

#curl -i -X POST -H 'Content-Type: application/json' -d '{"name": "New item", "year": "2009"}' http://rest-api.io/items

#curl -i -X PUT -H 'Content-Type: application/json' -d '{"name": "Updated item", "year": "2010"}' #http://rest-api.io/items/5069b47aa892630aae059584


# ======================================= EOF ====================================

