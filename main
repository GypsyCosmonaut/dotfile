#!/usr/bin/env bash

#watch fuser fdisk dd fsck r2 parallel

# ======================================== Rules =========================================
# Use as ${tmp_}/0 as final output file
# Use "${}" "$""" "$num"
# Use single ticks with sed and awk (don't why it understands it)
# Use "${ Var }" 	when EXPANSION NEEDED			in SHELL
# Use "$Var"		when EXPANSION NOT NEEDED
# Use '$""'		when SUBSTITUTING STDIN			in AWK and SED
# Use single ticks when 
#			NO RUN TIME SUBSTITUTION EXIST in Quotes
#			Quotes DO NOT have other single ticks
# Use double ticks when 
#			RUN TIME SUBSTITUTION EXIST in Quotes
#			Quotes HAVE ANY single ticks
# Inside Double ticks		
#			LEAVE ACTIVE RUNTIME SUBSTITUTION 	${ charVar_ }
#			ESCAPE UNWANTED SUBSTITUTION		\${ charVar }, some ${ integerVar }	
#			ESCAPE unwanted Quote terminations	"\"\""
# ${ intVar } are
#			inherited from USER INPUT
#			inherited by sed and awk like ${0}
# ${ charVar_ } are 
#			ACTIVE runtime substitution variables
# ${ charVar } are 
#			inherited substitution from USER INPUT or ANOTHER FUNCTION or LOOP
#			PASSIVE substitution variables
# Before >| or >>
#			check if configuration exists
#	-CAUTION- -OR-	check the number of lines in that file and DELETE ALL LINES after last line
# Double Escape \\ before new-line character

# =============================== DIRECTORIES =======================================

#mkdir /git/mine		2>| /dev/null ; echo -n $?

ls /tmp/files		1>| /dev/zero 2>&1 || 	mkdir /tmp/files 	
ls /root/tmp		1>| /dev/zero 2>&1 || 	mkdir /root/tmp 	

ls /root/git/dotfile	1>| /dev/null 2>&1 || 
	git clone https://github.com/GypsyCosmonaut/main.git		/root/git

ls /root/git/web	1>| /dev/null 2>&1 || 
	git clone https://github.com/GypsyCosmonaut/web.git 		/root/git

# =============================== EXECUTABLES =======================================

chmod +x /root/git/dotfile/functions
chmod +x /root/git/dotfile/sysconf

# ==============================RUNTIME SUBSTITUTIONS================================
# function to list runtime substitutions here

export tmp_=/tmp/files
export si_="sed -i"
export se_="sed -e"
export gq_="grep -q"
export gs_="gsettings set"
export og_="org.gnome"
export func_="/root/git/dotfile/functions"

echo
(${gq_} earth /etc/hostname) || (
	echo earth 1>| /etc/hostname && 
	${si_} '2s/.*/127.0.1.1    earth/' /etc/hosts 
	)
	
(${gq_} groot 0< /etc/passwd) 	|| (
	echo 'promt for root' && 
	passwd root
	)
	
(${gq_} groot 0< /etc/passwd) 	|| (
	useradd --create-home groot && 
	${si_} '/groot/s/$/\/bin\/bash/' /etc/passwd && 
	echo 'promt for groot' && 
	passwd groot
	)
# ================================= SUDOERS ========================================

(${gq_} groot 0< /etc/sudoers) 	||
	echo "groot	ALL=(ALL:ALL) ALL" 		>> /etc/sudoers


# ================================ CONFIGURATIONS =======================================
# function to list all gsettings here

echo $'\x1b[1m\x1b[7mWant it Configured ??\x1b[27m'
read r1
if echo ${r1} |
	grep -iq "^y" ;
then
	/root/git/dotfile/sysconf
fi

#"${si_}" 's/\(^#\)\([\t ]\+\)\(NONE\|art\|gif\|jpg\|png\|bmp\|tif\|avi\|mov\|mpg\|fws\|doc\|pst\|ost\|dbx\|idx\|mbx\|wpc\|htm\|pdf\|mail\|pgd\|pgp\|txt\|rpm\|wav\|ra\|dat\|zip\|java\|max\|pins\)\([\t ]\+\)\(n\|y\)\([\t ]\+\)\(.*\)/\2\3\4\5\6\7/'		/etc/scalpel/scalpel.conf

${si_} 's/\(^#\)\(\t\+\|\s\+\|\s\+\t\+\|\t\+\s\+\)\(NONE\|art\|gif\|jpg\|png\|bmp\|tif\|avi\|mov\|mpg\|fws\|doc\|pst\|ost\|dbx\|idx\|mbx\|wpc\|htm\|pdf\|mail\|pgd\|pgp\|txt\|rpm\|wav\|ra\|dat\|zip\|java\|max\|pins\)\(\t\+\|\s\+\|\s\+\t\+\|\t\+\s\+\)\(n\|y\)\(\t\+\|\s\+\|\s\+\t\+\|\t\+\s\+\)\(.*\)/\2\3\4\5\6\7/' 							/etc/scalpel/scalpel.conf

# ==================================ALIASES/FUNCTIONS=================================
# function to list all aliases/functions here
#cat  index.html | sed '1,61d; 210,$d; /script/d' | sed 's/^\s*\(.*\)/\1/; s/gp.insertPrx({\(.*\)});/\1/; s/"//g; s/proxy_city:,//i; s/,proxy_refs:null//i; s/,proxy_uid:null//i; s/,proxy_status:ok//i; s/,proxy_state://i; s/,/\n/; s/,/\n/2; s/,/\t\t\t\t/1; 0~1 a\\'

#cat  index.html | sed '1,61d; 210,$d; /script/d' | sed 's/^\s*\(.*\)/\1/; s/gp.insertPrx({\(.*\)});/\1/; s/"//g; s/proxy_city:,//i; s/,proxy_refs:null//i; s/,proxy_uid:null//i; s/,proxy_status:ok//i; s/,proxy_state://i; s/proxy_//gi; s/,/\n/; s/:/: /; s/:/:\t /2; s/:/:\t /4; s/,/\n/2; s/,/\t\t/; s/,/\t\t\t/; 0~1 a\\'


${si_} '100i \\n'				/root/.bashrc
${si_} '101,$d' 				/root/.bashrc

${si_} 's/#\(alias grep=\)/\1/' 		/root/.bashrc
${si_} 's/\(alias ls=\)/#\1/'			/root/.bashrc
${si_} 's/\(HISTSIZE=\)/#\1/'			/root/.bash_history
${si_} 's/\(HISTFILESIZE=\)/#\1/'		/root/.bash_history

{

	(${gq_} 'HISTFILE=' 	0< /root/.bash_history)	|| echo 'export HISTSIZE='
	(${gq_} 'HISTFILESIZE=' 0< /root/.bash_history)	|| echo 'export HISTFILESIZE='
	
} >> /root/.bash_history

(${gq_} 'set colored-stats on' 0< /etc/inputrc) || echo 'set colored-stats on'	>> /etc/inputrc


#"${gq_}" "^replace().*" 	${rc_} || echo 'replace() {} '


{
	#echo "set -o noclobber"
	
	#"${gq_}" ".* lsa=.*" 	/root/.bashrc || echo 'alias lsa =""'
	echo 'alias f="xdotool key ctrl+f"'
	echo 'alias ls="l"'
	echo 'alias pgrep="pgrep -f"'
	echo 'alias l="ls -F --color=auto"'
	echo 'alias lv="ls -FlAshZid --color=auto"'
	echo 'alias la="ls -FlAshZi --color=auto"'	
	echo 'alias c="tput reset"'
	echo 'alias e="exit"'
	echo 'alias allout="kill -9 -1"'
	echo 'alias ct="cat -A"'
	echo 'alias iip="ip addr | grep 255"'
	echo 'alias eip="curl -s http://whatismyip.akamai.com/"'
	echo 'alias tailf="tail -f"'
	echo 'alias update="apt-get update -y && apt-get upgrade -y ;"'
	#echo "alias upgrade=\"apt-get update && apt-get upgrade && apt-get dist-upgrade ; printf '\e[?5h' ; read -p '' ; printf '\e[?5l' ;\""
	echo 'alias upgrade="apt-get update -y && apt-get upgrade -y && apt-get dist-upgrade -y ; xwd -root >|/tmp/files/a.xwd ; convert -negate /tmp/files/a.xwd /tmp/files/b.xwd ; timeout 1 xwud -in /tmp/files/b.xwd ;"'
	echo 'alias install="apt-get install"'
	echo 'alias remove="apt-get remove"'
	echo 'alias show="apt-cache show"'
	echo 'alias policy="apt-cache policy"'
	echo 'alias lcron="echo ${USER} && echo && cat /var/spool/cron/crontabs/${USER}"'
	echo 'alias rmdir="rm -r"'
	echo 'alias reload=". /root/git/dotfile/main"'
	echo 'alias rm="mv -t /tmp/files/"'
	echo "alias hex=\"${func_} hex\""
	echo "alias lproxy=\"${func_} lproxy\""
	echo "alias network=\"${func_} network\""
	echo "alias system=\"${func_} system\""
	echo "alias gitup=\"${func_} gitup\""

	echo "
	cproxy() {
		${func_} cproxy \"\$@\"
	}"
	
	echo "
	gedit() { 
		${func_} gedit \"\$@\"
	}"

	echo "
	lh() {
		${func_} lh \"\$@\"
	}"

	echo "
	replace() { 
		if [ \$# -eq 0 ] ; 
		then
			echo $'\x0a\x1B\x5B\x31\x6D\x72\x65\x70\x6C\x61\x63\x65\x3A\x20\x1B\x5B\x37\x6D\x57\x68\x65\x72\x65\x20\x57\x68\x61\x74\x20\x54\x6F\x57\x68\x61\x74\x20\x50\x61\x74\x68\x1B\x5B\x32\x37\x6D\x0A';
		else
			${func_} replace \"\$@\"
		fi
	}"

	echo "
	lman() { 
		if [ \$# -ne 0 ] ; 
		then
			${func_} lman \"\$@\"
		else
			echo $'\x1b[1mlman \x1b[7mUtility\x1b[27m'
		fi
	}"

	echo "
	weather() {
		if [ \$# -ne 0 ] ; 
		then
			${func_} weather \"\$@\"
		else
			echo $'\x1b[1mweather \x1b[7mPlace\x1b[27m'
		fi
	}"

	echo "
	lsd() {
		${func_} lsd
	}"	#pending
	
	echo "
	search() { 	
		if [ \$# -ne 0 ] ; 
		then
			${func_} search \"\$@\"
		else
			echo $'\x1B\x5B\x31\x6D\x73\x6C\x69\x73\x74\x20\x1B\x5B\x37\x6D\x55\x74\x69\x6C\x69\x74\x79\x1B\x5B\x32\x37\x6D'
		fi
	}"

	echo "
	whatis(){
		if [ \$# -ne 0 ] ; 
		then
			${func_} whatis \"\$@\"		
		else
			echo $'\x1b[1mwhat \x1b[7mUtility\x1b[27m'
		fi
	}"

	echo "
	glist() { 
		if [ \$# -ne 0 ] ; 
		then
			${func_} glist \"\$@\"
		else
			echo $'\x1b[1mglist \x1b[7mKeyword\x1b[27m'
		fi
	}"

	echo "
	grange() { 
		if [ $# -ne 0 ] ; 
		then
			${func_} grange \"\$@\"
		else
			echo $'\x1b[1mgrange \x1b[7mSchema\x1b[27m'
		fi
	}"

} >> /root/.bashrc

. /root/.bashrc


# ================================= CRON JOBS ======================================
# function to list all cron jobs here

(${gq_} updatedb 0< /var/spool/cron/crontabs/${USER}) 	||
	{ crontab -l; echo "1 1 * * * updatedb"; } 		| crontab -

(${gq_} 'rm -rf' 0< /var/spool/cron/crontabs/${USER}) 	||
	{ crontab -l; echo "1 1	* * * rm -rf ${tmp_}/*"; } 	| crontab -

(${gq_} firefox 0< /var/spool/cron/crontabs/${USER}) 	||
	{ crontab -l; echo "1 1 * * * export DISPLAY=:0 && xhost local:"${USER}" && /usr/bin/firefox"; }							| crontab -

#{
#echo "7		5	/root/files/mega	/root/files/anacron"

#} >> /etc/anacrontab

echo -e "\x0a\x1b[7m\x57\x61\x6e\x74\x20\x55\x70\x67\x72\x61\x64\x65\x20\x3f\x3f\x1b[27m"
read r1 ;
if echo "${r1}" | 
	grep -iq "^y" ; 
then
	apt-get update -y && apt-get upgrade -y ;
	
	printf '\x0a\x1b[7m\x57\x61\x6e\x74\x20\x44\x69\x73\x74\x72\x6f\x20\x55\x70\x67\x72\x61\x64\x65\x20\x3f\x3f\x1b[27m'
	read r101
	if echo "${r101}" | 
		grep -iq "^y" ;	
	then 
		apt-get dist-upgrade -y ;
		
		echo $'\x0a\x1b[7m\x57\x61\x6E\x74\x20\x32\x46\x41\x20\x3F\x3F\x1b[27m'
		read r10101
		if echo "${r10101}" |
			grep -iq "^y" ;	
		then
			echo $'\e[33;44;1m\e[H\e[J'
			echo $'\x0a\033[1m \x1b[7m\x59\x6F\x75\x27\x72\x65\x20\x72\x65\x71\x75\x69\x72\x65\x64\x20\x74\x6F\x20\x73\x74\x61\x79\x21\x1b[27m \033[0m'
			google-authenticator ;
			echo 'auth required pam_google_authenticator.so nullok' >> /etc/pam.d/comm-auth
			#echo 'auth required pam_google_authenticator.so nullok' >> /etc/pam.d/sshd
			#"${si_}" 's/\(ChallengeResponseAuthentication \)no/\1yes/' /etc/ssh/sshd_config
			#service ssh restart
		fi
				
		printf '\x0a\x1b[7m\127\141\156\164\040\111\156\163\164\141\154\154\141\164\151\157\156\040\077\077\x1b[27m\012\012'
		read r10101;
		if echo "${r10101}" | 
			grep -iq "^y" ;	
		then
			apt-get install -y\
			tree ccrypt rotix dirmngr speedtest-cli xdotool wmctrl lshw jq ed\ 
			metagoofil \
			vega \
			i3 \
			squid3 \
			websploit \
			routersploit \
			mitmf \
			snort \
			privoxy \
			owasp-mantra-ff \
			mutt \
			iperf \
			kali-linux-web kali-linux-forensic kali-linux-full kali-linux-pwtools \
			libimage-exiftool-perl \
			libpam-google-authenticator
			empathy \
			tor gnupg2 bittorrent amule\
			strace valgrind \
			f2fs torchat fsck syncthing ssh pterm belenios-tool xbindkeys ;
			#texlive-full gedit-plugins xautomation xwd
		fi
	fi
fi

echo $'\x0a\x1b[7m\x3E\x3E\x3E\x20\x27\x72\x65\x6c\x6f\x61\x64\x27\x20\x69\x73\x20\x73\x65\x74\x1b[27m'
echo ;
echo $'\x0a\x1b[7m\x57\x61\x6e\x74\x20\x52\x65\x73\x74\x61\x72\x74\x20\x3f\x3f\x20\x1b[27m'
read r1 ;
if echo "${r1}" | 
	grep -iq "^y" ;	
then
	init 6 ;
else
	wid_=$(xprop -root | 
		grep "_NET_ACTIVE_WINDOW(WINDOW)"| 
		awk '{print $5}' ;
		)
	xdotool windowfocus "${wid_}" ;
	xdotool key ctrl+t ;
	wmctrl -i -a "${wid_}" && 
	exit ;
fi
#curl -i -X GET http://rest-api.io/items
#curl -i -X GET http://rest-api.io/items/5069b47aa892630aae059584
#curl -i -X DELETE http://rest-api.io/items/5069b47aa892630aae059584
#curl -i -X POST -H 'Content-Type: application/json' -d '{"name": "New item", "year": "2009"}' http://#rest-api.io/items

#curl -i -X POST -H 'Content-Type: application/json' -d '{"name": "New item", "year": "2009"}' http://rest-api.io/items

#curl -i -X PUT -H 'Content-Type: application/json' -d '{"name": "Updated item", "year": "2010"}' #http://rest-api.io/items/5069b47aa892630aae059584


# ======================================= EOF ====================================

