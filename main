#!/usr/bin/env bash

# ======================================== Rules =========================================
# Use as ${tmp_}/0 as final output file
# Use "${}" "$""" "$num"
# Use single ticks with sed and awk (don't why it understands it)
# Use "${ Var }" 	when EXPANSION NEEDED			in SHELL
# Use "$Var"		when EXPANSION NOT NEEDED
# Use '$""'		when SUBSTITUTING STDIN			in AWK and SED
# Use single ticks when 
#			NO RUN TIME SUBSTITUTION EXIST in Quotes
#			Quotes DO NOT have other single ticks
# Use double ticks when 
#			RUN TIME SUBSTITUTION EXIST in Quotes
#			Quotes HAVE ANY single ticks
# Inside Double ticks		
#			LEAVE ACTIVE RUNTIME SUBSTITUTION 	${ charVar_ }
#			ESCAPE UNWANTED SUBSTITUTION		\${ charVar }, some ${ integerVar }	
#			ESCAPE unwanted Quote terminations	"\"\""
# ${ intVar } are
#			inherited from USER INPUT
#			inherited by sed and awk like ${0}
# ${ charVar_ } are 
#			ACTIVE runtime substitution variables
# ${ charVar } are 
#			inherited substitution from USER INPUT or ANOTHER FUNCTION or LOOP
#			PASSIVE substitution variables
# Before >| or >>
#			check if configuration exists
#	-CAUTION- -OR-	check the number of lines in that file and DELETE ALL LINES after last line
# Double Escape \\ before new-line character

# ==============================RUNTIME SUBSTITUTIONS================================

export tmp_=/tmp/files
export si_="sed -i"
export se_="sed -e"
export gq_="grep -q"
export gs_="gsettings set"
export og_="org.gnome"
export func_="/root/git/dotfile/functions"

# ================================ CONFIGURATIONS =======================================

chmod 750 /root/git/dotfile/sconf

echo $'\x1b[1m\x1b[7mWant it Configured ??\x1b[27m'
read r1
if echo ${r1} |
	grep -iq "^y" ;
then
	/root/git/dotfile/sconf
	/root/git/dotfile/uconf
fi

# ==================================ALIASES/FUNCTIONS=================================

/root/git/dotfile/bashrc
. /root/.bashrc

echo -e "\x0a\x1b[7m\x57\x61\x6e\x74\x20\x55\x70\x67\x72\x61\x64\x65\x20\x3f\x3f\x1b[27m"
read r1 ;
if echo "${r1}" | 
	grep -iq "^y" ; 
then
	apt-get update -y && apt-get upgrade -y ;
	printf '\x0a\x1b[7m\x57\x61\x6e\x74\x20\x44\x69\x73\x74\x72\x6f\x20\x55\x70\x67\x72\x61\x64\x65\x20\x3f\x3f\x1b[27m'
	read r101
	if echo "${r101}" | 
		grep -iq "^y" ;	
	then 
		apt-get dist-upgrade -y ;		
		echo $'\x0a\x1b[7m\x57\x61\x6E\x74\x20\x32\x46\x41\x20\x3F\x3F\x1b[27m'
		read r10101
		if echo "${r10101}" |
			grep -iq "^y" ;	
		then
			echo $'\e[33;44;1m\e[H\e[J'
			echo $'\x0a\033[1m \x1b[7m\x59\x6F\x75\x27\x72\x65\x20\x72\x65\x71\x75\x69\x72\x65\x64\x20\x74\x6F\x20\x73\x74\x61\x79\x21\x1b[27m \033[0m'
			google-authenticator ;
			echo 'auth required pam_google_authenticator.so nullok' >> /etc/pam.d/comm-auth
			#echo 'auth required pam_google_authenticator.so nullok' >> /etc/pam.d/sshd
			#"${si_}" 's/\(ChallengeResponseAuthentication \)no/\1yes/' /etc/ssh/sshd_config
			#service ssh restart
		fi
				
		printf '\x0a\x1b[7m\127\141\156\164\040\111\156\163\164\141\154\154\141\164\151\157\156\040\077\077\x1b[27m\012\012'
		read r10101;
		if echo "${r10101}" | 
			grep -iq "^y" ;	
		then
			apt-get install -y\
			tree ccrypt rotix dirmngr speedtest-cli xdotool wmctrl lshw jq ed\ 
			metagoofil \
			vega \
			i3 \
			squid3 \
			websploit \
			routersploit \
			mitmf \
			snort \
			privoxy \
			owasp-mantra-ff \
			mutt \
			iperf \
			kali-linux-web kali-linux-forensic kali-linux-full kali-linux-pwtools \
			libimage-exiftool-perl \
			libpam-google-authenticator
			empathy \
			tor gnupg2 bittorrent amule\
			strace valgrind \
			f2fs torchat fsck syncthing ssh pterm belenios-tool xbindkeys ;
			#texlive-full gedit-plugins xautomation xwd lynx emacs mktemp w3m watchdog
			#xrandr xdpyinfo gimp inkscape fbi fim
		fi
	fi
fi
#watch fuser fdisk dd fsck r2 parallel strftime(histtimeformat)

echo $'\x0a\x1b[7m\x3E\x3E\x3E\x20\x27\x72\x65\x6c\x6f\x61\x64\x27\x20\x69\x73\x20\x73\x65\x74\x1b[27m'
echo ;
echo $'\x0a\x1b[7m\x57\x61\x6e\x74\x20\x52\x65\x73\x74\x61\x72\x74\x20\x3f\x3f\x20\x1b[27m'
read r1 ;
if echo "${r1}" | 
	grep -iq "^y" ;	
then
	init 6 ;
else
	wid_=$(xprop -root | 
		grep "_NET_ACTIVE_WINDOW(WINDOW)"| 
		awk '{print $5}' ;
		)
	xdotool windowfocus "${wid_}" ;
	xdotool key ctrl+t ;
	wmctrl -i -a "${wid_}" && 
	exit ;
fi

# ======================================= EOF ====================================

