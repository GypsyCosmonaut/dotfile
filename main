#!/usr/bin/env bash

# ======================================== Rules =========================================
: << 'SKIP'
 Use as ${tmp_}/0 as final output file
 Use "${}" "$""" "$num"
 Use single ticks with sed and awk (don't why it understands it)
 Use "${ Var }" 	when EXPANSION NEEDED			in SHELL
 Use "$Var"		when EXPANSION NOT NEEDED
 Use '$""'		when SUBSTITUTING STDIN			in AWK and SED
 Use single ticks when 
			NO RUN TIME SUBSTITUTION EXIST in Quotes
			Quotes DO NOT have other single ticks
 Use double ticks when 
			RUN TIME SUBSTITUTION EXIST in Quotes
			Quotes HAVE ANY single ticks
 Inside Double ticks		
			LEAVE ACTIVE RUNTIME SUBSTITUTION 	${ charVar_ }
			ESCAPE UNWANTED SUBSTITUTION		\${ charVar }, some ${ integerVar }	
			ESCAPE unwanted Quote terminations	"\"\""
 ${ intVar } are
			inherited from USER INPUT
			inherited by sed and awk like ${0}
 ${ charVar_ } are 
			ACTIVE runtime substitution variables
 ${ charVar } are 
			inherited substitution from USER INPUT or ANOTHER FUNCTION or LOOP
			PASSIVE substitution variables
 Before >| or >>
			check if configuration exists
	-CAUTION- -OR-	DELETE the configurations before appending
SKIP

export tmp_="/root/tmp/trash"
export si_="sed -i"
export se_="sed -e"
export gs_="gsettings set"
export og_="org.gnome"
export func_="/root/git/dotfile/functions"

read -n 1 -p 'Do aliens exist ??' r1 ; tput cr; tput el;
if echo ${r1} | 
	grep -iq "^y" ;
then
	export alien_=0
else
	export alien_=1
fi

ls /root/git		1>| /dev/zero 2>&1 || 	mkdir /root/git 	
ls /root/git/dotfile	1>| /dev/null 2>&1 || (	mkdir /root/git/dotfile 	&&
	git clone https://github.com/GypsyCosmonaut/dotfile.git		/root/git/dotfile )

chmod 750 /root/git/dotfile/sconf

read -n 1 -p $'\x1b[1m\x1b[7mWant it Configured ??\x1b[27m' r1 ; tput cr; tput el;
if echo ${r1} |
	grep -iq "^y" ;
then
	/root/git/dotfile/sconf
	/root/git/dotfile/uconf
fi

. /root/git/dotfile/bashrc

perl -MPOSIX -e 'tcflush 0,0'
echo -e "\x0a\x1b[7m\x57\x61\x6e\x74\x20\x55\x70\x67\x72\x61\x64\x65\x20\x3f\x3f\x1b[27m"
read -n 1 r1 ; tput cr; tput el;
if echo "${r1}" | 
	grep -iq "^y" ; 
then
	apt-get update -y && apt-get upgrade -y ;
	perl -MPOSIX -e 'tcflush 0,0'
	printf '\x0a\x1b[7m\x57\x61\x6e\x74\x20\x44\x69\x73\x74\x72\x6f\x20\x55\x70\x67\x72\x61\x64\x65\x20\x3f\x3f\x1b[27m'
	read -n 1 r101 ; tput cr; tput el;
		if echo "${r101}" | 
		grep -iq "^y" ;	
	then 
		trap '' 2
		apt-get dist-upgrade -y ;
		trap 2
		perl -MPOSIX -e 'tcflush 0,0'
		printf '\x0a\x1b[7m\127\141\156\164\040\111\156\163\164\141\154\154\141\164\151\157\156\040\077\077\x1b[27m\012\012'
		read -n 1 r10101 ; tput cr; tput el;
		if echo "${r10101}" | 
			grep -iq "^y" ;	
		then
			while read word_
			do
				apt-get install ${word_} 2>&1 | tee /dev/tty | (GREP_COLORS='sl=1;7' grep "Unable to locate package" && read input_ 0< /dev/tty)
			done 0< /root/git/dotfile/utilities
			#doc-rfc qrfcview rfcdiff
			#boinc 	texlive-full gedit-plugins xautomation xwd lynx emacs mktemp w3m watchdog
			#xrandr xdpyinfo gimp inkscape darktable fbi fim groff glfer
			#dbeacon flamethrower uftp udpcast	
			#xinput evtest tor-dbg ddd stealth cde dialog
			#systemctl journalctl
			#compress lzma xz tar lrzip 7z 7za zip rar gzip bzip2 lzip lzop arj
		fi
		perl -MPOSIX -e 'tcflush 0,0'
		read -n 1 -p $'\x0a\x1b[7m\x57\x61\x6E\x74\x20\x32\x46\x41\x20\x3F\x3F\x1b[27m' r10101 ; tput cr; tput el;
		if echo "${r10101}" |
			grep -iq "^y" ;	
		then
			echo $'\e[33;44;1m\e[H\e[J'
			echo $'\x0a\033[1m \x1b[7m\x59\x6F\x75\x27\x72\x65\x20\x72\x65\x71\x75\x69\x72\x65\x64\x20\x74\x6F\x20\x73\x74\x61\x79\x21\x1b[27m \033[0m'
			#google-authenticator ;
			(grep -q google 0< /etc/pam.d/comm-auth) || 
				echo 'auth required pam_google_authenticator.so nullok' 	>> /etc/pam.d/comm-auth
			#(grep -q groot 0< /etc/pam.d/sshd) 	||
				#echo 'auth required pam_google_authenticator.so nullok' 	>> /etc/pam.d/sshd
			#"${si_}" 's/\(ChallengeResponseAuthentication \)no/\1yes/' /etc/ssh/sshd_config
			#service ssh restart
		fi
	fi
fi
#watch fuser fdisk dd fsck r2 strftime(histtimeformat) xephyr xpra autofs logrotate rsync pkexec modprobe fdupes hunt
#ldconfig objdump ld as nasm clang gcc g++
#suricata mimikatz
#scratch
perl -MPOSIX -e 'tcflush 0,0'
echo $'\x0a\x1b[7m\x3E\x3E\x3E\x20\x27\x72\x65\x6c\x6f\x61\x64\x27\x20\x69\x73\x20\x73\x65\x74\x1b[27m'
read -n 1 -p $'\x0a\x1b[7m\x57\x61\x6e\x74\x20\x52\x65\x73\x74\x61\x72\x74\x20\x3f\x3f\x20\x1b[27m' r1 ; tput cr; tput el;
if echo "${r1}" | 
	grep -iq "^y" ;	
then
	init 6 ;
else
	wid_=$(xprop -root | 
		grep "_NET_ACTIVE_WINDOW(WINDOW)"| 
		awk '{print $5}' ;
		)
	xdotool windowfocus "${wid_}" ;
	xdotool key ctrl+t ;
	wmctrl -i -a "${wid_}" && 
	exit ;
fi

#wid_=$(xprop -root | grep "_NET_ACTIVE_WINDOW(WINDOW)"| awk '{print $5}'); xdotool windowfocus "${wid_}"; xdotool key /+t+r+e+e ;	wmctrl -i -a "${wid_}"

